#!/bin/bash

#########################################################################
##
## Simulating the effects of a section of the polymer having a different
## bending rigidity
##
## This is achieved by defining a second type of bond, which will then
## have a different bond strength ascribed to it in the LAMMPS script
##
#########################################################################

#########################################################################
1. Generate and adjust initial conditions

# A single set of initial conditions is created and modified

./generate_Loop_fixedLK<<EOF
300
100
100
100
15
initial_conditions.txt
EOF

# This EOF approach was adapted from a past student
# The whole set of lines is copied into the command line, with EOF
# indicating that the following information is the answer to the 
# questions

# A python script was used to change a number of bond types to 2

python ./bending_angle_type_changer.py initial_conditions.txt 300 150

# The arguments are <file to be changed> <number of atoms> <number of
# atoms to be changed> 
# The code assumes the structure of the file to be that generated by
# generate_Loop_fixedLK
#
# Note this differs to the polytorsion angle type changer in that it
# changes the number of specified angles from type 1 to 3, where the
# latter changes type to to 3. Type 1 are bending angles, type 2 are 
# polytorsion

#########################################################################


#########################################################################
# 2. Run a set of LAMMPS simulations

# The LAMMPS script loops 10 times over, with 10 randomised seeds
# NB: the seeds were input manually so there are only 10; running 11 or 
# more will result in identical results

# LAMMPS is run in 'partition' mode, where 11 simulations run at the
# same time, with a different value of bending stiffness is used in each
# simulation.

# NB: the mpirun command will complain if the number of partitions 
# doesn't match the number of variables in the LAMMPS script is
# is mismatched with the number of partitions requested. If the number
# of bending stiffnesses has been adjusted, fix the value after -n and 
# -p before running

# Before running LAMMPS, need to make sure no conda environment running
# and create directories for all the outputs

conda deactivate

mkdir dumpfiles restarts

mpirun -n 5 ~/newLammps/lmp_mpi -p 5x1 -in in.lammps_SCloop

             ^substitute me!!!!^

# Note: Within the lammps script in.lammps_SCloop there is a
#       loop which runs 10 repeat simulations, one after the other
#       using a different seed for the random numbers.
#       Since 11 simulations run at the same time, each with different
#       Lk, then this command in total runs 110 simulations

# This LAMMPS script runs for 20 million steps.
# These simulations each last around 40 minutes
# so this script will run for close to 7 hours total

# You probably don't want to sit and wait for this to run.
# You can instead use the command in this form so that it runs in the
# background and you can log out and come back later:

nohup mpirun -n 5 ~/newLammps/lmp_mpi -p 5x1 -in in.lammps_SCloop &

# see the page on Teams about 'Some useful command line stuff' for 
# detail on nohup ... &

# NB: Your compiled version of LAMMPS will have to be called here
#########################################################################

#########################################################################
# 3. Calculate some quantities from the dump files

# Again, make sure no conda environment is running and create directory:

conda deactivate

mkdir measurements

# Loop over bending stiffness (bs) values and runs

for bs in 10.0 15.0 20.0 25.0 30.0

do
    for run in {1..10}
    do
        python ./process_dump_file.py dumpfiles/dump_L300_bs${bs}_run${run}.DNA 300 150 50000 measurements/scMeasure_L300_bs${bs}_run${run}.dat
    done
done

# Note: Again the whole set of commands with two nested for loops
#       was pasted onto the command line. So the process dump code
#       was run 110 times, once for each dump file, one after the other
 
#########################################################################

#########################################################################
4. Plot single set of runs (11 simulations) to see the long term
   behaviour of the 3 main parameters: radius of gyration squared, twist,
   and writhe. Linking number is also plotted as a "sanity check".

python plots_vs_time.py

# These plots were quite messy, so I also separated the increased and 
# decreased stiffness regimes. These plots were also quite noisy but 
# marginally improved

python plots_vs_time_lower.py

python plots_vs_time_higher.py
#########################################################################

#########################################################################
# 5. Calculate the metrics separately for the normal section and 
     for the section with the varied stiffness

# Again, make sure no conda environment is running and create directory:

conda deactivate

mkdir split_measurements

# Loop over bending stiffness (bs) values and runs

for bs in 10.0 15.0 20.0 25.0 30.0

do
    for run in {1..10}
    do
        ./process_dump_file_split.py dumpfiles/dump_L300_bs${bs}_run${run}.DNA 300 150 50000 split_measurements/scMeasure_L300_bs${bs}_run${run}.dat
    done
done

# Note: The extra argument specifies how many atoms were included in the 
# bond altering. For this simulation the value was 150.
#########################################################################

#########################################################################
6. Generate histograms for the twist and rg2 for both the twisted
   and untwisted sections

python plots_histograms_stats.py

# This was modified to reflect the different data we wish to extract 


